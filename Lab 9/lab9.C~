#include <iostream>
#include <string>
#include <fstream>

using namespace std;

class Node;
typedef Node* NodePtr;

class LL;
class Node 
{
  friend class LL;
private:
  int stId;
  string stName;
  string stEmail;
  int stAge;
  NodePtr nextStudent;
public:
  Node();
  Node(int id, string name, string email, int age);
};

class LL
{
private:
  NodePtr  top;
  void destroy (NodePtr& top);

public:
  LL();
  LL(const LL& source);
  ~LL();
  void insertDataFromFile();
  void print ();
  bool search (int id);
  void insertAfterFirst (int id, string name, string email, int age);
  void insertBeforeFirst (int id, string name, string email, int age);
  void insertAfterLast (int id, string name, string email, int age);
  void insertBeforeLast (int id, string name, string email, int age);
  void remove (int id);
  void copy (NodePtr top1, NodePtr& top2);
};
//--------------------------------------------
//--------------------------------------------
// the default constructor
LL::LL()
{
  top = NULL;
}
//--------------------------------------------
//--------------------------------------------
// the copy constructor
Node::Node()
{
  stId = stAge = 0;
  stName = stEmail = " ";
}
Node::Node(int id, string name, string email, int age)
{
  stId = id;
  stName = name;
  stEmail = email;
  stAge = age;
  NodePtr nextStudent;
}
LL::LL(const LL& source)
{
  top = NULL;
  copy(source.top,top);
}
//--------------------------------------------
//--------------------------------------------
// the destructor
LL::~LL()
{

}
//--------------------------------------------
//--------------------------------------------
// Read a transaction file and insert the data into it
// after reading a set of data you can call any of the 
// insert functions to insert the node into the linked list 
/* use the following data to test your program
   76543Marymary@csusm.edu19
   98765Kathykathy@csusm.edu30
   16438Floraflora@csusm.edu25
   43260Peterpeter@csusm.edu29
   87590kimkim@csusm.edu31
*/
void LL::insertDataFromFile()
{
  ifstream fin;
  fin.open("transaction.txt");
  
  int newId;
  string newName;
  string newEmail;
  int newAge;

  if(!fin)
    cout << "ERROR!!! Could not read file." << endl;
  while(fin)
    {
      fin >> newId;
      fin >> newName;
      fin >> newEmail;
      fin >> newAge;
      insertAfterLast(newId, newName, newEmail, newAge);
    }
  fin.close();
}
//--------------------------------------------
//--------------------------------------------
// print the linked list
void LL::print ()
{
  NodePtr p;
  p = top;

  while(p != NULL)
    {
      cout << "ID: " << p -> stId << endl;
      cout << "Name: " << p -> stName << endl;
      cout << "Email: " << p -> stEmail << endl;
      cout << "Age: " << p -> stAge << endl;
      p = p -> nextStudent;
      cout << endl;
    }
}
//--------------------------------------------
//--------------------------------------------
// search for a particular student id in the list
bool LL::search (int id)
{
  NodePtr p = top;

  while(p != NULL)
    {
      if(p -> stId == id)
	return true;
      else
	{
	  p = p -> nextStudent;
	}
    }
  return false;
}
//--------------------------------------------
//--------------------------------------------
// creates a node and insert the node on the top of the
// linked list but after the first node. For example if the
// list constains 1 --> 20 -->13 --> 4 --> 5 --> 6
// after inserting 10, we should get:
// list constains 1 --> 10 --> 20 -->13 --> 4 --> 5 --> 6
void LL::insertAfterFirst (int id, string name, string email, int age)
{
  bool found;
  found = search(id);
  
  if(!found)
    {
      if(top == NULL)
	{
	  insertBeforeFirst(id, name, email, age);
	}
      else
	{
	  NodePtr p = new Node(id,name,email,age);
	  NodePtr q = top; 
	  
	  q = top -> nextStudent;
	  top -> nextStudent = p;
	  p -> nextStudent = q;
	}
    }
  else 
    cout << "Could not insert after first." << endl;
}
//--------------------------------------------
//--------------------------------------------
// creates a node and insert the node on the top of the
// linked list before the first node. For example if the
// list constains 1 --> 20 -->13 --> 4 --> 5 --> 6
// after inserting 10, we should get:
// list constains 10 --> 1 --> 20 -->13 --> 4 --> 5 --> 6

void LL::insertBeforeFirst (int id, string name, string email, int age)
{
  bool found;
  found = search(id);

  if(!found)
    {
      NodePtr p = new Node(id,name,email,age);
      p -> nextStudent = top;
      top = p;
    }
  else 
    {
      cout << "Could not insert before first." << endl;
    }
}
void LL::insertBeforeLast (int id, string name, string email, int age)
{
  bool found;
  found = search(id);
  
  if(!found)
    {
      NodePtr p = new Node(id,name,email,age);
      NodePtr q = top;
      if(top == NULL)
	{
	  insertBeforeFirst(id,name,email,age);
	}
      else
	{
	  NodePtr x;
	  while(q -> nextStudent != NULL)
	    {
	      x = q;
	      q = q -> nextStudent;
	    }
	  x -> nextStudent = p;
	  p -> nextStudent = q;
	}
    }
  else
    {
      cout << "Could not insert before last." << endl;
    }
}
//--------------------------------------------
//--------------------------------------------
// creates a node and insert the node on the bottom of the
// linked list after the last node. For example if the
// list constains 1 --> 20 -->13 --> 4 --> 5 --> 6
// after inserting 10, we should get:
// list constains 1 --> 20 -->13 --> 4 --> 5 --> 6 --> 10
void LL::insertAfterLast (int id, string name, string email, int age)
{
  bool found;
  found = search(id);

  NodePtr p = new Node(id,name,email,age);
  NodePtr q = top;
  if(!found)
    {
      if(top == NULL)
	{
	  top = p;
	  return;
	}
      else
	{
	  while(q -> nextStudent != NULL)
	    {
	      q = q -> nextStudent;
	    }
	  q -> nextStudent = p;
	  return;
	}
    }
}
//--------------------------------------------
//--------------------------------------------
// removes a node from the list based on the given student id 
void LL::remove (int id)
{
  NodePtr current, temporary;
  
  if(id == top -> stId)
    {
      temporary = top;
      top = top -> nextStudent;
    }
  else
    {
      current = top;
      while(current -> nextStudent -> stId != id)
	current = current -> nextStudent;
      temporary = current -> nextStudent;
      current -> nextStudent = current -> nextStudent -> nextStudent;
    }
  delete temporary;
}
//--------------------------------------------
//--------------------------------------------
// copies one list into another
void LL::copy (NodePtr atop, NodePtr& btop)
{
 
  NodePtr ap, bp;
  destroy (btop);
  if (atop != NULL) 
    {
      btop = new Node; 
      btop -> stId = atop -> stId;
      btop -> stName = atop -> stName;
      btop -> stEmail = atop -> stEmail;
      btop -> stAge = atop -> stAge;
      ap = atop;
      bp = btop;
      while (ap -> nextStudent != NULL) 
	{
          bp -> nextStudent = new Node; 
	  ap = ap -> nextStudent;
          bp = bp -> nextStudent;
	  bp -> stId = ap -> stId;
	  bp -> stName = ap -> stName;
	  bp -> stEmail = ap -> stEmail;
	  bp -> stAge = ap -> stAge;
	}
      bp -> nextStudent = NULL;
    }
  else
    cout << "Could not copy." << endl;
  
}       
//--------------------------------------------
// deallocate the nodes in a linked list
void LL::destroy(NodePtr& top) 
{
  NodePtr current, temp;
  current = top;
  while(current != NULL)
    {
      temp = current;
      current = current -> nextStudent;
      delete temp;
    }
  top = NULL;
}
//--------------------------------------------
int main () 
{
  LL list1;
  
  cout << "---------- Here is the original List 1 -------------" << endl;
  list1.insertDataFromFile();
  list1.print();

  cout << "---------- Here is the 2nd version of List 1 ----------------" << endl;
  list1.insertAfterFirst (54321, "Jim", "jim@csusm.edu", 25);
  list1.insertBeforeFirst (54123, "Joe", "joe@csusm.edu", 35);
  list1.insertAfterLast (63421, "Adam", "adam@csusm.edu", 20);
  list1.insertBeforeLast (66641, "Nancy", "nancy@csusm.edu", 27);
  list1.print();
  
  cout << "-------- Search for 12321 id in List 1 --------------" << endl;
  bool found = list1.search (12321);
  if (found)
    cout << "the record was found" << endl;
  else
    cout << "the record was not found" << endl;
  cout << endl;
  
  cout << "----------- Removes 54321 id from List 1 -------------" << endl;
  list1.remove (54321);
  cout << endl;
  cout << "----------- Here is the 3rd version of List 1 ----------" << endl;
  list1.print();

  cout << "---------- Here is List 2 ---------------" << endl;
  LL list2(list1);
  list2.print();
  
  return 0;

}
//--------------------------------------------


