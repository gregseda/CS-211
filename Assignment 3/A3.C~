/******************************************************************************************
Date: 11/15/15
Name: Greg Seda
Email: seda004@cougars.csusm.edu
Program: A3.C
Purpose: This program implements a small university.
Input: ./a.out ----> Transaction.txt
Output: This program executres the given commands from the inpputted transaction file, such as creating new faculty, departments, students, courses and listing them all. 
******************************************************************************************/
#ifndef A3_C
#define A3_3

#include <string>
#include <vector>
#include <iostream>
#include <fstream>

using namespace std;

#include "university.h"

bool University::failure = false;
bool University::success = true;

/*****************************************************************************************************
Purpose: Constructor for the University Class
Date Written: 11/5/15
****************************************************************************************************/
University::University()
{
}
/*************************************************************************************************
Purpose: Decontrsuctor for the University Class
Date Written: 11/5/15
*****************************************************************************************/
University::~University()
{
}
/************************************************************************************************
Purpose: This routine checks to see if the faculty Id that is passed through the function exists in the Faculties vecotr.
Parameters: The parameter Id, is the faculty Id that is given from the transaction file.
Local Variables: Check is a boolean that is used to return a failure or successs.
Date Written: 11/10/15
***********************************************************************************************/
bool University::FacultyIdExist(long Id)
{
  bool check;
  for(int i = 0;i < Faculties.size(); i++)                     //This for loop opens the Faculties vector and checks to see if the given faculty id exists.
    {
      if(Faculties[i].id == Id)                              
	{
	  check = success;
	  return check;
	}
    }
  check = failure;
  return check;
}
/**********************************************************************************
Purpose: This routine creates a new department and stores it into the Departments vector.
Parameters: The name of the department (depName), location (depLoc), and department chair Id (depChairId) are passed through this routine.
Local Variables: Check is a boolean that is used to return a failure or success.
Date Written: 11/10/15 
****************************************************************************/
bool University::CreateNewDepartment(string depName, string depLoc, long depChairId)
{
  bool check;
  if((depChairId == !0) && (!FacultyIdExist(depChairId)))    //If the given department chair id does not exist, return failure.
    {
      cout << "The chair Id " << depChairId << " already exists." << endl;
      check = failure;
      return check;
    }
  Department newDept(depName, depLoc, depChairId);           //This creates a new object based on the given variables.
  Departments.push_back(newDept);                           //This stores the new object into the Departments vector.
  check = success;
  return check;
}
/*************************************
Optional
***************************************/
bool University::RemoveADepartment(long depId)
{
  return failure;
}
/*********************************************************************************************
Purpose: This routine is used to check if a major or department name exist in the Departments vector
Parameters: The given string sMajor, is the given department name or major.
Local Variables: Check is a boolean that is used to return a failure or success.
Date Written: 11/12/15 
**********************************************************************************************/
bool University::MajorExist(string sMajor)
{
  bool check;
  for(int i = 0; i < Departments.size(); i++)      //This opens the Departments vector.
    {
      if(Departments[i].name == sMajor)            //If the Major exists, then return success.
	{
	  check = success;
	  return check;
	}
    }
  check = failure;
  return check;
}
/**************************************************************************************************
Purpose: This routine is used to create a new student. It passes all of the given parameters and stores them into the Faculties vector.
Parameters: All of the variables passed through this routine are under the Student class (name, email, address, birth, gender, years of study, major and advisor id).
Local Variables: Check is a boolean that is used to return a failure or success.
Date Written: 11/13/15
**************************************************************************************************/
bool University::CreateNewStudent(string sName, string sEmail, string sAddress, string sDateOfBirth, string sGender, int sYearOfStudy, string sMajor, long sAdvisorId)
{
  bool check;
  if((sMajor == "0"))                                           //If the sMajor is "0", then the student has not chosen a major, but it still creates an object and stores it into the Students vector.
    {
      cout << "The student has not chosen a major." << endl;
      Student newStudent(sName, sEmail, sAddress, sDateOfBirth, sGender, sYearOfStudy, sMajor, sAdvisorId);
      Students.push_back(newStudent);
      check = success;
      return check;
    }
  else if(sAdvisorId == 0)                                   //If the sAdvisorId is "0", then the student has not chosen an adivsor, but it still creates an object and stores it into the Students vector.
    {
      cout << "The student has not chosen an advisor." << endl;
      Student newStudent(sName, sEmail, sAddress, sDateOfBirth, sGender, sYearOfStudy, sMajor, sAdvisorId);
      Students.push_back(newStudent);
      check = success;
      return check;
    }
  else if((!MajorExist(sMajor)))                               //If the sMajor does not exist, then return a failure.
    {
      cout << "The major " << sMajor << " does not exist." << endl;
      check = failure;
      return check;
    }
  else if(!FacultyIdExist(sAdvisorId))                         //if the sAdvisorId does not exist, then return a faiulre.
    {
      cout << "The advisor " << sAdvisorId << " does not exist." << endl;
      check = failure;
      return check;
    }			 
  else                                                       //If the above checks are by passes, then create an object and stores it into the Students vector.
    {
      Student newStudent(sName, sEmail, sAddress, sDateOfBirth, sGender, sYearOfStudy, sMajor, sAdvisorId);
      Students.push_back(newStudent);
      check = success;
      return check;
    }


}
/********************************
Optional
********************************/
bool University::RemoveAStudent(long sStId)
{
  return failure;
}
/********************************************************************************************************
Purpose: This routine checks to see if the given department chair Id exists in the Departments vector.
Parameters: The given department chair id is passed through this function.
Local Variables: Check is a boolean that is used to return a failure or success.
Date Written 11/13/15
********************************************************************************************************/
bool University::DeptChairExist(long cDepId)
{
  bool check;
  for(int i = 0; i < Departments.size(); i++)                //This opens the Departments vector.
    {
      if(Departments[i].chairId == cDepId)                  //If the department chair id given is equal to a chair id in the vector, then return success.
        {
          check = success;
          return check;
        }
    }
  check = failure;
  return check;
}
/************************************************************************************************************
Purpose: This routine creates a new course and stores it into the courses vector.
Parameters: The variables in the Course class (name, department id, is taught by, and maximum seats) are passsed through this function.
Local Variables:
Date Written: 11/13/15
************************************************************************************************************/
bool University::CreateNewCourse(string cName, long cDepId, long cTaughtBy, int cMaxSeat)
{
  bool check;
  
  if(cTaughtBy == 0)                                     //If the course is taught by no one, then return failure.
    {
      cout << "No one is assigned to teach this course." << endl;
      check = failure;
      return check;
    }
  if(!FacultyIdExist(cTaughtBy))                      //If the faculty id does not exist, then return failure.
    {
      cout << "The faculty member " << cTaughtBy << " does not exist." << endl;
      check = failure;
      return check;
    }
  if(!DeptIdExist(cDepId))                        //If the department id does not exist, then return failure.
    {
      cout << "The Department Id " << cDepId << " does not exist." << endl;
      check = failure;
      return check;
      }
  else                                           //If the above checks are by passed, the create a new object and store it into the Courses vector.
    {
      Course newCourse(cName, cDepId, cTaughtBy, cMaxSeat);
      Courses.push_back(newCourse);
      check = success;
      return check;
    }
}
/******************************
Optional
*******************************/
bool University::RemoveACourse(long cCRN)
{
  return failure;
}
/************************************************************************************************************
Purpose: This routine checks to see if the given department id exists in the Departments vector.
Parameters: The given department id is passed through this routine.
Local Varibales: Check is a boolean that is used to return failure or success.
Date Written: 11/14/15 
***********************************************************************************************************/
bool University::DeptIdExist(long depId)
{
  bool check;
  for(int i = 0; i < Departments.size(); i++)     //This opens the Departments vector
    {
      if(Departments[i].id == depId)              //If the given department id is equal to a id in the Departments vector, then return success.
        {
          check = success;
          return check;
        }
    }
  check = failure;
  return check;
}
/**************************************************************************************************************
Purpose: This routine creates a faculty and stores it into the Faculties vector.
Parameters: The given parameters are the variables from the Faculty class (name, email, address, birth, gender, salary, years of experience, department id).
Local Variables: Check is a boolean that is used to return failure or success.
Date Written: 11/14/15
*************************************************************************************************************/
bool University::CreateNewFaculty(string fName, string fEmail, string fAddress, string fDateOfBirth, string fGender, float fSalary, int fYearOfExp, long fDepId)
{
  bool check;
  if(!DeptIdExist(fDepId))                                    //If the given department id does not exist, then return failure.
    {
      cout << "The department " << fDepId << " does not exist." << endl;
      check = failure;
      return check;
    }
  
  Faculty newFaculty(fName, fEmail, fAddress, fDateOfBirth, fGender, fSalary, fYearOfExp, fDepId);                    //This creates a new Faculty object using the given variables.
  Faculties.push_back(newFaculty);                                                                                    //This stores the new Faculty object into the Faculties vector.
  check = success;
  return check;
}
/*********************
Optional
*****************/
bool University::RemoveAFaculty(long fFactId)
{
  return failure;
}
/****************************************************************************************
Purpose: This routine will print the courses taught by a specific faculty member.
Parameters: The given faculty id is passed through this routine.
Local Variables: Check is a boolean that is used to return success and failure. Temp is an integer that is used to hold the id.
Date Written: 11/14/15
*********************************************************************************************/
bool University::ListCoursesTaughtByFaculty(long facultyId)
{
  bool check;
  int temp;
  if(!FacultyIdExist(facultyId))                               //If the given faculty id does not exist, then return failure.
    {
      cout << "The faculty id " << facultyId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else                                                         //If the given faculty does exist, then execute the following code.
    {
      for(int i = 0; i < Faculties.size(); i++)               //This opens the faculties vector.
	{
	  temp = Faculties[i].id;                             //Stores the specific faculty id into temp
	  if(temp == facultyId)
	    {
	      for(int x = 0; x < Courses.size(); x++)             //This opens the Courses vector.
		{
		  if(temp == Courses[x].isTaughtBy)               //If temp matches the isTaughtBy variable from the specific course, then list the course name and course id.
		    {
		      cout << "Course Id: " << Courses[x].CRN << endl;
		      cout << "Course Name: " << Courses[x].name << endl;
		    }
		}
	    }
	}
      check = success;
      return check;
    }
}
/***********************************************************************************************
Purpose: This routine prints the courses taken by a specific student.
Parameters: The given student id is passed through this routine.
Local Variables: Check is a boolean that is used to return success and failure. Temp is an integer that is used to hold the id.
Date Written: 10/14/15
**************************************************************************************************/
bool University::ListCoursesTakenByStudent(long studentId)
{
  bool check;
  int temp;
  if(!checkStId(studentId))     //If the student Id does not exist, then return failure.
    {
      cout << "The student Id " << studentId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else                         //If the student id does exist, then execute the following code.
    {
      for(int i = 0; i < Students.size(); i++)          //This opens the Students vector.
        {
          temp = Students[i].id;                        //This stores the student id into temp.
	  if(temp == studentId)                        //If the given student id is equal to temp, then execute the following code.
	    {
	      for(int c = 0; c < Students[i].coursesTaken.size(); c++)    //This opens the coursesTaken vector from the Student class.
		{
		  cout << "Course Id: " << Students[i].coursesTaken[c].CRN << endl;
		  cout << "Course Name: " << Students[i].coursesTaken[c].name << endl;
		}
	    }
	}
      check = success;
      return check;
    }
}
/*****************************************************************************************************
Purpose: This routine prints the faculties in a particular department.
Parameters: The given department id is passed through this routine.
Local Variables: Check is a boolean that is used to return success and failure. Temp is an integer that is used to hold the size of the specific Departments vector.
Date Written: 11/14/15
***************************************************************************************************/
bool University::ListFacultiesInDepartment (long departId)
{  
  bool check;
  int temp;
  if(!DeptIdExist(departId))                   //If the given department id does not exist, then return failure.
    {
      cout << "The department " << departId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else                                        //If the the given department id does exist, then execute the following code.
    {
      for(int d = 0; d < Departments.size(); d++)               //This opens the Departments vector
	{
	  temp = Departments[d].id;                             //This stores a specific department id into temp.
	  
	  if(temp == departId)                               //If the specific id matches the given department id, then excute the following code.
	    {
	      for(int i = 0; i < Faculties.size(); i++)     //This opens the Faculties vector.
		{  
		  if(temp == Faculties[i].departId)        //If the specific id matches an id in the Faculties vector, then print.
		    {
		      cout << "Faculty Id: " << Faculties[i].id << endl;
		      cout << "Faculty Name: " << Faculties[i].name << endl;
		      cout << endl;
		    }
		}
	     }
	}
      
    }
  check = success;
  return check;
}
/****************************************************************************************************
Purpose: This routine prints the students of a particular faculty.
Parameters: The given faculty id is passed through this routine.
Local Variables: Check is a boolean that is used to return success and failure. Temp is an integer that is used to
hold the size of the specific Faculties vector.
Date Written: 11/14/15
******************************************************************************************************/
bool University::ListStudentsOfAFaculty(long facultyId)
{
  bool check;
  int temp;
  if(!FacultyIdExist(facultyId))                   //If the faculty id does not exist, then return failure.
    {
      cout << "The faculty id " << facultyId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else                                            //If the faulty id does exist, then execute the following code.
    {
      for(int i = 0; i < Faculties.size(); i++)   //This opens the Faculties vector.
	{
	  temp = Faculties[i].id;                 //This stores the specific faculty id into temp
	  if(temp == facultyId)                   //If temp matches the given facultyId, the execute the following code.
	    {
	      for(int s = 0; s < Students.size(); s++)     //This opens the Students vector.
		{
		  if(temp == Students[s].advisorId)           //Tf temp matches an advisor id in the Students vector, then print
			{
			  cout << "Student Id: " << Students[s].id << endl;
			  cout << "Student Name: " << Students[s].name << endl;
			}
		}
	    }
	}
    }
  check = success;
  return check;
}
/************************************************************************************************
Purpose: This routine prints all of the courses offered by a particular department.
Parameters: The given department id is passed through this routine.
Local Variables:  Check is a boolean that is used to return success and failure. Temp is an integer that is used to hold the size of the specific Departments vector.
Date Written: 11/14/15
**********************************************************************************************/
bool University::ListCoursesOfADepartment(long departId)
{
  bool check;
  int temp;
  if(!DeptIdExist(departId))                    //If the given department id does not exist, then return failure.
    {
      cout << "The department " << departId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else                                         //If the given department id does exist, then execute the following code.
    {
      for(int i = 0; i < Departments.size(); i++)      //This opens the Departments vector.
	{
	  temp = Departments[i].id;                    //This stores the specific department id into temp
	  if(temp == departId)                         //If temp matches the given department id, then execute the following code.
	    {
	      for(int c = 0; c < Courses.size(); c++)  //This opens the Courses vector.
		{
		  if(temp == Courses[c].departId)      //If temp matches a department id in the Courses vector, then print.
		    {
		      cout << "Course Id: " << Courses[c].CRN << endl;
		      cout << "Course Name: " << Courses[c].name << endl;
		    }
		}
	    }
	}
    }
  check = success;
  return check;
}
/**************************************************************************************************
Purpose: This routine checks to see if the given student id exists in the Students vector.
Parameters: The given student id is passed through this routine.
Local Variables:  Check is a boolean that is used to return success and failure.
Date Written: 11/14/15
********************************************************************************************************/
bool University::checkStId(long stId)
{
  bool check;
  for(int i = 0; i < Students.size(); i++)       //This opens the Students vector.
    {
      if(Students[i].id == stId)                //If the specific student id matches the given student id, then return success.
        {
          check = success;
          return check;
        }
    }
  check = failure;
  return check;
}
/*******************************************************************************************************
Purpose: This routine checks to see if the given course id exists in the Courses vector.
Parameters: The given course id is passed through this routine.
Local Variables: Check is a boolean that is used to return success and failure.
Date Written: 11/14/15
******************************************************************************************************/
bool University::checkCoId(long courseId)
{
  bool check;
  for(int i = 0; i < Courses.size(); i++)                //This opens the Courses vector.
    {
      if(Courses[i].CRN == courseId)                   //If the specific course id matches the given course id, then return success.
        {
	  cout << "Course id " << courseId <<" was found." << endl;
          check = success;
          return check;
        }
    }
  check = failure;
  return check;
}
/******************************************************************************************************
Purpose: This routine adds a course in the coursesTaken vector in the Student class.
Parameters: The given course id (courseId) and student id (stId) are passed through this routine.
Local Variables:  Check is a boolean that is used to return success and failure.
Date Written: 11/13/15
*******************************************************************************************************/
bool University::AddACourseForAStudent(long courseId, long stId)
{
  bool check;
  if(!checkStId(stId))                                                         //If the given student id does not exist, then return failure.
    {
      cout << "The student Id " << stId << " does not exist." << endl;
      check = failure;
      return check;
    }
  if(!checkCoId(courseId))                                                     //if the given course id does not exist, then return failure.
    {
      cout << "The course Id " << courseId << " does not exist." << endl;
      check = failure;
      return check;
    }
  for(int i = 0; i < Courses.size(); i++)                                        //This opens the Courses vector.
    {
      if(Courses[i].CRN == courseId)                                             //If the specific course id and the given course id match, then execute the following code.
	{
	  if(Courses[i].assignedSeats >= Courses[i].maxAvailableSeats)          //If the specific courses assigned seats are more than the maximum, then return failure.
	    {
	      cout << "The course " << courseId << " is full." << endl;
	      check = failure;
	      return check;
	    }
	  else                                                                   
	    {
	      for(int s = 0; s < Students.size(); s++)                          //This opens the Students vector
		{
		  if(Students[s].id == stId)                                    //If the specific student id matches the given student id, then return success.
		    {
		      cout << "The course " << courseId << " was added to the student." << endl;
		      Students[s].coursesTaken.push_back(Courses[i]);           //This stores the course into the coursesTaken vector.
		      Courses[i].assignedSeats++;                              //This increments the assigned seats by 1.
		      check = success;
		      return check;
		    }
		}
	      
	    }
	}
    }
}
/********************************************
Optional
********************************************/
bool University::DropACourseForAStudent(long courseId, long stId)
{
  return failure;
}
/**********************************************************************************************
Purpose: This routine assigns a faculty to a department.
Parameters: The given faculty id (facultyId) and department id (departId) are passed through this function.
Local Variables: Check is a boolean that returns failure or success.
Date Written: 11/14/15
*********************************************************************************************/	      
bool University::AssignDepartmentChair(long facultyId, long departId)
{
  bool check;
  if(!FacultyIdExist(facultyId))                    //If the given faculty id does not exist, then return failure.
    {
      cout << "The faculty id " << facultyId << " does not exist." << endl;
      check = failure;
      return check;
    }
  if(!DeptIdExist(departId))                       //If the given department id does not exist, then return failure.
    {
      cout << "The department id " << departId << " does not exist." << endl;
      check = failure;
      return check; 
      }
  else
  {
    for(int i = 0; i < Departments.size(); i++)                  //This opens the Departments vector.
      {
	if(Departments[i].id == departId)                     //If the specific department id matches the given department id, then return success.
	  {
	    Departments[i].chairId = facultyId;               //This assigns the department chair
	    check = success;
	    return check;
	  }
      }
  }
}
/************************************************************************************************
Purpose: This routine assigns a course to a faculty member.
Parameters: The given faculty id (facultyId) and course id (courseId) are passed through this routine.
Local Variables: Check is a boolean that returns success or failure.
Date Written: 11/14/15
************************************************************************************************/
bool University::AssignInstructorToCourse (long facultyId, long courseId)
{
  bool check;
  if(!FacultyIdExist(facultyId))        //If the given faculty id does not exist, then return failure.
    {
      cout << "The faculty id " << facultyId << " does not exist." << endl;
      check = failure;
      return check;
    }
  if(!checkCoId(courseId))              //If the given course id does not exist, then return failure.
    {
      cout << "The course id " << courseId << " does not exist." << endl;
      check = failure;
      return check;
    }
  else
    {
      for(int i = 0; i < Courses.size(); i++)              //This opens the Courses vector.
        {
          if(Courses[i].CRN == courseId)                  //If the given course id matches the specific course id, then return success.
            {
              Courses[i].isTaughtBy = facultyId;        //This assigns the faculty member to the course
              check = success;
              return check;

            }
        }
    }
}
/****************************************************************************************
Purpose: This routine lists the name and id for each department.
Local Variables: Check is a boolean that returns failure or success.
Date Written: 11/14/15
*****************************************************************************************/
bool University::ListDepartments()
{
  bool check;
  if(Departments.size() == 0)                //If the Departments vector size is equal to 0, then return failure.
    {
      check = failure;
      return check;
    }
  else
    {
      for(int i = 0; i < Departments.size(); i++)      //This opens the Departments vector.
	{
	  cout << "Department Id: " << Departments[i].id << endl;              //This prints the specific Department id.
	  cout << "Department Name: " << Departments[i].name << endl;          //This prints the specific Department name.
	  cout << endl;
	}
      check = success;
      return check;
    }
}
/********************************************************************************************
Purpose: This routine lists the id and name for each student.
Local Variables: Check is a boolean that returns faiulre or success.
Date Written: 11/14/15
**********************************************************************************************/
bool University::ListStudents()
{
  bool check;
  if(Students.size() == 0)             //If the Students vector size is equal to 0, then return failure.
    {
      check = failure;
      return check;
    }
  else
    {
      for(int i = 0; i < Students.size(); i++)           //This opens the Students vector.
	{
	  cout << "Student Id: " << Students[i].id << endl;       //This prints the specific student id.
	  cout << "Student Name: " << Students[i].name << endl;   //This prints the specific student name.
	  cout << endl;
	}
      check = success;
      return check;
    }
}
/*****************************************************************************************************
Purpose: This routine prints the id and name for each course.
Local Variables: Check is a boolean that returns failure or success.
Date Written: 11/14/15
*******************************************************************************************************/
bool University::ListCourses()
{
  bool check;
  if(Courses.size() == 0)                      //The Courses vector size is equal to 0, then return failure.
    {
      check = failure;
      return check;
    }
  else
    {
      for(int i = 0; i < Courses.size(); i++)        //This opens the Courses vector.
	{
	  cout << "Course Id: " << Courses[i].CRN << endl;      //This prints the specific course id.
	  cout << "Course Name: " << Courses[i].name << endl;   //This prints the specific course name.
	  cout << endl;
	}
      check = success;
      return check;
    }
}
/*****************************************************************************************
Purpose: This routine prints the id and name for each faculty.
Local Variables: Check is a boolean that returns failure and success.
Date Written: 11/14/15
******************************************************************************************/
bool University::ListFaculties()
{
  bool check;
  if(Faculties.size() == 0)                 //If the Faculties vector size is equal to 0, then return failure.
    {
      check = failure;
      return check;
    }
  else
    {
      for(int i = 0; i < Faculties.size(); i++)       //This opens the Faculties vector. 
	{
	  cout << "Faculty Id: " << Faculties[i].id << endl;          //This prints the specific faculty id.
	  cout << "Faculty Name: " << Faculties[i].name << endl;      //This prints the specific faculty name. 
	  cout << endl;
	}
      check = success;
      return check;
    }
}
/*****************************************************************************************************
Purpose: This routine opens the entered transaction file from the user and proccesses the given commands.
Parameters: The string fileName is passed through the routine.
Local Variables: Check is a boolean that returns failure and success. The "data" variables are variables that are used in each class. The two strings, transFile and cmd are holders for the processed data.
Date Written: 11/15/15
*****************************************************************************************************/
bool University::ProcessTransactionFile (string fileName)
{
  bool check;
  string transFile;
  transFile = fileName;
  string cmd;
  string sData;
  string sData2;
  string sData3;
  string sData4;
  string sData5;
  string sData6;
  long lData;
  long lData2;
  int iData;
  float fData;
  
  ifstream fin;
  fin.open(transFile.data());             //This opens the given Transaction file.

  if(!fin)                                //If the transaction file does not exist, then return failure.                                                         
    {
      cout << "ERROR! There is no transaction file " << transFile << "." << endl;
      check = failure;
      return check;
    }
  else                                   //If the transaction file does exist, then execute the following code.
    {
      while(fin >> cmd)                  
	{
	  if(cmd == "CreateNewDepartment")      //If the proccessed input is CreateNewDepartment, excecute the following code into the check boolean.
	    {
	      fin >> sData; 
	      fin >> sData2;
	      fin >> lData;
	      cout << "\n******************* CreateNewDepartment " << sData << " **************" << endl;
	      check = CreateNewDepartment(sData, sData2, lData);      //This executes the function CreateNewDepartment and return success or failure.
	      if(check == success)
		{
		  cout << "The new department " << sData << " was created." << endl;
		}
	      else
		{
		  cout << "Error! The new department " << sData << " was not created." << endl;
		}
	    }
	  else if(cmd == "RemoveADepartment")      //If the proccessed input is RemoveADepartment, execute the following code.
	    {
	      fin >> lData;
	      check = RemoveADepartment(lData);     //This executes the RemoveADepartment function and returns success or failure into the check boolean. 
	      cout << "\n********************** RemoveADepartment " << lData << " ****************" << endl;
	      if(check == failure)
		{
		  cout << "\nError! The department " << lData << " was not removed." << endl;
		}
	    }
	  else if(cmd == "CreateNewStudent")     //If the proccesssed input is CreateNewStudent, execute the following code.
	    {
	      fin >> sData; 
	      fin >> sData2;
	      fin >> sData3;
	      fin >> sData4;
	      fin >> sData5;
	      fin >> iData;
	      fin >> sData6;
	      fin >> lData;
	      cout << "\n****************** CreateNewStudent " << sData << " *****************" << endl; 
	      check = CreateNewStudent(sData, sData2, sData3, sData4, sData5, iData, sData6, lData); //This exexutes he CreateNewStudent function and returns success or failure into check boolean.
	      if(check == success)
		{
		  cout << "The new student " << sData << " was successfully created." << endl;
		}
	      else 
		{
		  cout << "Error! The new student " << sData << " was not created." << endl;
		}
	    }
	  else if(cmd == "RemoveAStudent")         //If the proccessed input is RemoveAStudent, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n**************** RemoveAStudent " << lData << " **********" << endl;
	      check = RemoveAStudent(lData);       //This executes the RemoveAStudent function and returns failure.
	      if(check == success)
		{
		cout << "The student " << lData << " was successfully removed." << endl;
		}
	      else
		{
		  cout << "Error! The student " << lData << " was not removed." << endl;
		}
	    }
	  else if(cmd == "CreateNewCourse")      //If the proccessed input is CreateNewCourse, then execute the following code.
	    {
	      fin >> sData;
	      fin >> lData;
	      fin >> lData2;
	      fin >> iData;
	      cout << "\n***************** CreateNewCourse " << sData << " **********" << endl;
	      check = CreateNewCourse(sData, lData, lData2, iData);     //This executes the CreateNewCourse function and returns success or failure.
	      if(check == success)
		{
		  cout << "The new course " << sData<< " was successfully created." << endl;
		}
	      else 
		{
		  cout << "Error! The new course " << sData << " was not created." << endl;
		}
	    }
	  else if(cmd == "RemoveACourse")      //If the proccessed input is RemoveACourse, then execute the following code.
	    {
	      fin >> lData; 
	      cout << "\n****************** RemoveACourse " << lData << " *************" << endl;
	      check = RemoveACourse(lData);    //This executes the RemoveACourse function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The course " << lData << " was not removed." << endl;
		}
	    }
	  else if(cmd == "CreateNewFaculty")     //If the proccessed input is CreateNewFaculty, then execute the following code.
	    {
	      fin >> sData; 
	      fin >> sData2;
	      fin >> sData3;
	      fin >> sData4;
	      fin >> sData5;
	      fin >> fData; 
	      fin >> iData; 
	      fin >> lData;
	      cout << "\n********************** CreateNewFaculty " << sData << " ***************" << endl;
	      check = CreateNewFaculty(sData, sData2, sData3, sData4, sData5, fData, iData, lData);      //This executes the CreateNewFaculty function and returns success or failure into the check boolean.
	      if(check == success)
		{
		  cout << "The new faculty member " << sData << " was successfully created." << endl;
		}
	      else 
		{
		  cout << "Error! The new faculty member " << sData << " was not created." << endl;
		}
	    }
	  else if(cmd == "RemoveAFaculty")      //If the proccessed input is RemoveAFaculty, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n*********************** RemoveAFaculty " << lData << " ******************" << endl;
	      check = RemoveAFaculty(lData);            //This executes the RemoveAFaculty function and returns failure into the check boolean.
	      if(check == success)
		{
		  cout << "The faculty member " << lData <<" was successfully removed." << endl;
		}
	      else
		{
		  cout << "Error! The faculty member " << lData << " was not removed." << endl;
		}
	    }
	  else if(cmd == "ListCoursesTaughtByFaculty")   //If the proccessed input is ListCoursesTaughtByFaculty, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n********************** ListCoursesTaughtByFaculty " << lData << " *****************" << endl;
	      check = ListCoursesTaughtByFaculty(lData);       //This executes the ListCoursesTaughtByFaculty and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The courses taught by " << lData << " were not listed." << endl;
		}
	    }
	  else if(cmd == "ListCoursesTakenByStudent")    //If the proccessed input is ListCoursesTakenByStudent, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n************************ ListCoursesTakenByStudent " << lData << " **************" << endl;
	      check = ListCoursesTakenByStudent(lData);   //This executes the ListCoursesTakenByStudent function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The courses taken by " << lData << " were not listed." << endl; 
		}
	    }
	  else if(cmd == "ListFacultiesInDepartment")     //If the proccessed input is ListFacultiesInDepartment, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n******************* ListFacultiesInDepartment " << lData << " *******************" << endl;
	      check = ListFacultiesInDepartment(lData);     //This executes the ListFacultiesInDepartment function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The faculties in department " << lData << " were not listed." << endl;
		}	    
	    }
	  else if(cmd == "ListStudentsOfAFaculty")      //If the proccessed input is ListStudentOfAFaculty, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n******************* ListStudentsOfAFaculty " << lData << " ********************" << endl;
	      check = ListStudentsOfAFaculty(lData);       //This executes the ListStudentOfAFaculty function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "\nError! The students of faculty " << lData << " were not listed." << endl;
		}
	    }
	  else if(cmd == "ListCoursesOfADepartment")   //If the proccessed input is ListCoursesOfADepartment, then execute the following code.
	    {
	      fin >> lData;
	      cout << "\n******************** ListCoursesOfADepartment " << lData << " ******************" << endl;
	      check = ListCoursesOfADepartment(lData);   //This executes the ListCoursesOfADepartment function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The courses of department  " << lData << " were not listed." << endl;
		}	  
	    }
	  else if(cmd == "AddACourseForAStudent")      //If the proccessed input is AddACourseForAStudent, then execute the following code.
	    {
	      fin >> lData;
	      fin >> lData2;
	      cout << "\n****************** AddACourseForAStudent " << lData2 << " ***********************" << endl;
	      check = AddACourseForAStudent(lData, lData2);    //This executes the AddACourseForAStudent function and returns failure or success into the check boolean.
	      if(check == success)
		{
		  cout << "The course " << lData << " was successfully added for student " << lData2 << "." << endl;
		}
	      else 
		{
		cout << "Error! The course " << lData << " was not added for student " << lData2 << "." << endl;
		}
	    }
	  else if(cmd == "DropACourseForAStudent")    //If the proccessed input is DropACourseForAStudent, then execute the following code.
	    {
	      fin >> lData;
	      fin >> lData2;
	      cout << "\n*************** DropACourseForAStudent " << lData2 << " *************************" << endl;
	      check = DropACourseForAStudent(lData, lData2);      //This exexutes the DropACourseForAStudent function and returns failure or success into the check boolean.
	      if(check == success)
		{
		  cout << "The course " << lData << " was successfully dropped for student " << lData2 << "." << endl;
		}
	      else
		{
		cout << "Error! The course " << lData << " was not dropped for student " << lData2 << "." << endl;
		}
	    }
	  else if(cmd == "AssignDepartmentChair")      //If the proccessed input is AssignDepartmentChair, then execute the following code.
	    {
	      fin >> lData;
	      fin >> lData2;
	      cout << "\n*************** AssignDepartmentChair " << lData << " ****************" << endl; 
	      check = AssignDepartmentChair(lData, lData2);     //This executes the AssignDepartmentChair function and returns failure or success into the check boolean.
	      if(check == success)
		{
		  cout << "The faculty member " << lData << " was successfully assigned to be department chair of " << lData2 << "." << endl;
		}
	      else
		{
		cout << "Error! The faculty member " << lData << " was not assigned to be department chair of " << lData2 << "." << endl;
		}
	    }
	  else if(cmd == "AssignInstructorToCourse")    //If the proccessed input is AssignInstructorToCourse, then execute the following code.
	    {
	      fin >> lData;
	      fin >> lData2;
	      cout << "\n***************** AssignInstructorToCourse " << lData << " ******************" << endl;
	      check = AssignInstructorToCourse(lData, lData2);    //This executes the AssignIntstructorToCourse function and returns success or failure into the check boolean.
	      if(check == success)
		{
		  cout << "The instructor " << lData << " was successfully assigned to the course " << lData2 << "." << endl;
		}
	      else
		{
		  cout << "Error! The instructor " << lData << " was not assigned to the course " << lData2 << "." << endl;
		}
	    }
	  else if(cmd == "ListDepartments")  //If the proccessed input is ListDepartments, then execute the following code.
	    {
	      cout << "\n******************* ListDepartments *****************" << endl;
	      check = ListDepartments();     //This executes the ListDepartments function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The departments were not listed." << endl;
		}
	    }
	  else if(cmd == "ListStudents")    //If the proccessed input is ListStudents, then execute the following code.
	    {
	      cout << "\n**************** ListStudents *****************" << endl;
	      check = ListStudents();      //This executes the ListStudents function and returns success or failure into the check boolean.
	      if(check == failure)
		{
		  cout << "Error! The students were not listed." << endl;
		}
	    }
	  else if(cmd == "ListCourses")    //If the proccessed input is ListCourses, then execute the following code.
	    {
	      cout << "\n***************** ListCourses *****************" << endl;
	      check = ListCourses();      //This executes the ListCourses function and returns success or failure into the check boolean.
	      if(check == failure)      
		{
		  cout << "Error! The courses were not listed." << endl;
		}
	    }
	  else if(cmd == "ListFaculties")    //If the proccessed input is ListFaculties, then execute the following code.
	    {
	      cout << "\n***************** ListFaculties ******************" << endl;
	      check = ListFaculties();      //This executes the ListFaculties function and returns success or failure in the check booelan.
	      if(check == failure)
		{
		  cout << "\nError! The faculties were not listed." << endl;
		}
	    }
	  else      //If the cmd does not exist, then return failure.
	    {
	      cout << "Error! The command was not valid." << endl;
	      check = failure;
	      return check;
	    }
	  cout << endl;
	}
      fin.close();    //This closes the transaction file.
    }
  check = success;
  return check;
}

#endif
